

// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex, normal;
uniform mat4 ModelViewProjectionMatrix, NormalMatrix;
varying vec3 vVertex, vNormal;

void main() {
    vNormal = vec3(NormalMatrix * vec4(normal, 0.0));
    vVertex = vertex;
    gl_Position = ModelViewProjectionMatrix * vec4(vertex,1.0);
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif
varying vec3 vVertex, vNormal;
uniform vec4 color;
uniform vec3 ambientColor, diffuseColor, specularColor;
uniform float kA, kD,kS;
void main() {
    vec3 lightPos = vec3(1);
    vec3 N = normalize(vNormal);
    vec3 L = normalize(lightPos - vVertex);

    // Lambert's cosine law
    float lambertian = max(dot(N, L), 0.0);
    float specular = 0.0;
    if(lambertian > 0.0) {
        vec3 R = reflect(-L, N);      // Reflected light vector
        vec3 V = normalize(-vVertex); // Vector to viewer
        // Compute the specular term
        float specAngle = max(dot(R, V), 0.0);
        specular = pow(specAngle, 20.0);
    }
    gl_FragColor = vec4(kA*ambientColor +
                        kD*lambertian * diffuseColor +
                        kS*specular * specularColor, 1.0);

    // gl_FragColor = color;
}`;