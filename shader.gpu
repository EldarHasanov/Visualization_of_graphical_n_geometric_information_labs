

// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex, normal;
attribute vec2 texture;
uniform mat4 ModelViewProjectionMatrix, NormalMatrix;
varying vec3 vVertex, vNormal;
uniform float t;
uniform bool translateLight;
varying vec2 vTexture;
uniform vec2 pointOfScaling;
uniform vec3 pointPos;
uniform float scalingNumber;

mat4 translation(vec3 t) {
    mat4 dst;

    dst[0][0] = 1.0;
    dst[0][ 1] = 0.0;
    dst[0][ 2] = 0.0;
    dst[0][ 3] = 0.0;
    dst[1][ 0] = 0.0;
    dst[1][ 1] = 1.0;
    dst[1][ 2] = 0.0;
    dst[1][ 3] = 0.0;
    dst[2][ 0] = 0.0;
    dst[2][ 1] = 0.0;
    dst[2][ 2] = 1.0;
    dst[2][ 3] = 0.0;
    dst[3][ 0] = t.x;
    dst[3][ 1] = t.y;
    dst[3][ 2] = t.z;
    dst[3][ 3] = 1.0;

    return dst;
}

mat4 scaling(float s){
    mat4 dst;

    dst[0][0] = s;
    dst[0][ 1] = 0.0;
    dst[0][ 2] = 0.0;
    dst[0][ 3] = 0.0;
    dst[1][ 0] = 0.0;
    dst[1][ 1] = s;
    dst[1][ 2] = 0.0;
    dst[1][ 3] = 0.0;
    dst[2][ 0] = 0.0;
    dst[2][ 1] = 0.0;
    dst[2][ 2] = s;
    dst[2][ 3] = 0.0;
    dst[3][ 0] = 0.0;
    dst[3][ 1] = 0.0;
    dst[3][ 2] = 0.0;
    dst[3][ 3] = 1.0;

    return dst;
}

void main() {
    vec4 texture1 = translation(vec3(-pointOfScaling,0))*vec4(texture,0,1);
    vec4 texture2 = scaling(scalingNumber)*texture1;
    vec4 texture3 = translation(vec3(pointOfScaling,0))*texture2;
    vTexture = vec2(texture3.x,texture3.y);
    vNormal = vec3(NormalMatrix * vec4(normal, 0.0));
    vVertex = vertex;
    
    gl_Position = ModelViewProjectionMatrix * vec4(vertex,1.0);
    if( translateLight ){
        gl_Position = ModelViewProjectionMatrix*translation(pointPos)* vec4(vertex,1.0);
        //gl_Position = ModelViewProjectionMatrix* vec4(vertex,1.0);
    }
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif
varying vec3 vVertex, vNormal;
uniform vec4 color;
uniform bool translateLight;
uniform sampler2D tmu;
varying vec2 vTexture;
void main() {gl_FragColor = texture2D(tmu, vTexture);
    if(translateLight){
        gl_FragColor = color;
    }
    
}`;